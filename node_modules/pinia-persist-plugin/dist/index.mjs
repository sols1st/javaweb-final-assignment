// src/plugin/scheduler.ts
var queued = false;
var queue = [];
var p = Promise.resolve();
var nextTick = (fn) => p.then(fn);
var flushJobs = () => {
  let fn = queue.shift();
  while (fn) {
    fn();
    fn = queue.shift();
  }
  queued = false;
};
var queueJob = (job) => {
  if (!queue.includes(job))
    queue.push(job);
  if (!queued) {
    nextTick(flushJobs);
    queued = true;
  }
};

// src/plugin/index.ts
var defaultOptions = {
  storage: window.sessionStorage,
  storageKey: "pinia-persist-plugin-state",
  omits: []
};
var getPersistedData = (storage, key, storageKey) => {
  const oldData = storage.getItem(storageKey);
  if (!oldData)
    return null;
  let res = null;
  try {
    res = JSON.parse(oldData != null ? oldData : "");
  } catch (error) {
    res = null;
  }
  return (res == null ? void 0 : res[key]) || null;
};
var persistState = (storage, storageKey, state) => {
  storage.setItem(storageKey, JSON.stringify(state));
};
var toArray = (value) => {
  if (Array.isArray(value))
    return value;
  return [value];
};
var omitStore = (target, omits) => {
  return Object.keys(target).reduce((acc, cur) => {
    if (!omits.includes(cur))
      acc[cur] = target[cur];
    return acc;
  }, {});
};
var persistPlugin = ({ context, storage, storageKey, omits }) => {
  const omitKeys = toArray(omits);
  const { store, pinia } = context;
  if (!omitKeys.includes(store.$id)) {
    const persistedData = getPersistedData(storage, store.$id, storageKey);
    if (persistedData)
      store.$patch(persistedData);
  }
  store.$subscribe(() => {
    queueJob(() => {
      const state = omitStore(pinia.state.value, omitKeys);
      persistState(storage, storageKey, state);
    });
  });
};
var createPersistPlugin = (options) => {
  const { storage: ds, storageKey: dk } = defaultOptions;
  const { storage = ds, storageKey = dk, omits = [] } = options != null ? options : {};
  return (context) => persistPlugin({ context, storage, storageKey, omits });
};

// src/utils/resetStore.ts
import { getActivePinia } from "pinia";
var toArray2 = (value) => {
  return Array.isArray(value) ? value : [value];
};
var resetStore = (omits = []) => {
  const store = getActivePinia();
  if (!store)
    throw new Error("No store found, [resetStore] can only be used after pinia has been initialized");
  omits = toArray2(omits);
  const storeSet = store._s;
  const storeList = [...storeSet.values()].filter((store2) => !omits.includes(store2.$id));
  storeList.forEach((_store) => _store.$reset());
};
export {
  createPersistPlugin,
  resetStore
};
